> source('switch.R'); library('knitr'); source('RGlobal.R'); source('chapter08.R', echo=TRUE, print.eval=TRUE, keep.source=TRUE, max.deparse=1e3)

> ## ----comparing two vectors one of which only has one element-------------
> c(6, 5, 4, 5, 7, 4) > 5
[1]  TRUE FALSE FALSE FALSE  TRUE FALSE

> ## ----storing a vector in a variable--------------------------------------
> test_nums <- c(6, 5, 4, 5, 7, 4)

> ## ----comparing each element one by one-----------------------------------
> is_test_nums_gt_5 <- c(
+   test_nums[1] > 5,
+   test_nums[2] > 5,
+   test_nums[3] > 5,
+   test_nums[4] > 5,
+   test_nums[5] > 5,
+   test_nums[6] > 5
+ )

> is_test_nums_gt_5
[1]  TRUE FALSE FALSE FALSE  TRUE FALSE

> ## ----comparing each element using a sequence-----------------------------
> test_nums[1:6] > 5
[1]  TRUE FALSE FALSE FALSE  TRUE FALSE

> ## ----comparing the vector all at once------------------------------------
> test_nums > 5
[1]  TRUE FALSE FALSE FALSE  TRUE FALSE

> ## ----loading and attaching the purrr package-----------------------------
> # install.packages("purrr")
> library(purrr)

> ## ----taking the square root of 9-----------------------------------------
> sqrt(9)
[1] 3

> ## ----taking the square root of a vector via map--------------------------
> map(c(4, 9, 16, 25), sqrt)
[[1]]
[1] 2

[[2]]
[1] 3

[[3]]
[1] 4

[[4]]
[1] 5


> ## ----using map_dbl to explicitly return a vector of doubles--------------
> map_dbl(c(4, 9, 16, 25), sqrt)
[1] 2 3 4 5

> ## ----using map_chr to explicitly return a vector of characters-----------
> map_chr(c(4, 9, 16, 25), sqrt)
[1] "2.000000" "3.000000" "4.000000" "5.000000"

> ## ----selecting two random rows from mtcars-------------------------------
> set.seed(2)

> dplyr::sample_n(tbl = mtcars, size = 2)
                  mpg cyl disp  hp drat   wt  qsec vs am gear carb
Valiant          18.1   6  225 105 2.76 3.46 20.22  1  0    3    1
Dodge Challenger 15.5   8  318 150 2.76 3.52 16.87  0  0    3    2

> ## ----using map to select two three and two rows from mtcars--------------
> set.seed(2)

> map(c(2, 3, 2), dplyr::sample_n, tbl = mtcars) 
[[1]]
                  mpg cyl disp  hp drat   wt  qsec vs am gear carb
Valiant          18.1   6  225 105 2.76 3.46 20.22  1  0    3    1
Dodge Challenger 15.5   8  318 150 2.76 3.52 16.87  0  0    3    2

[[2]]
                mpg cyl  disp  hp drat    wt  qsec vs am gear carb
Honda Civic    30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2
Valiant        18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1
Ford Pantera L 15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4

[[3]]
                   mpg cyl disp  hp drat   wt  qsec vs am gear carb
Maserati Bora     15.0   8  301 335 3.54 3.57 14.60  0  1    5    8
Hornet Sportabout 18.7   8  360 175 3.15 3.44 17.02  0  0    3    2


> ## ----using map_df to explicitly return a data.frame----------------------
> set.seed(2)

> map_df(c(2, 3, 2), dplyr::sample_n, tbl = mtcars) 
   mpg cyl  disp  hp drat    wt  qsec vs am gear carb
1 18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1
2 15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2
3 30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2
4 18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1
5 15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4
6 15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8
7 18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2

> ## ----a function which prints a custom statement--------------------------
> print_value <- function(x) {
+   print(paste("The value of x is ", x))
+ }

> ## ----using map to loop over the function returns the result--------------
> ans_map <- map(1:3, print_value)
[1] "The value of x is  1"
[1] "The value of x is  2"
[1] "The value of x is  3"

> ans_map
[[1]]
[1] "The value of x is  1"

[[2]]
[1] "The value of x is  2"

[[3]]
[1] "The value of x is  3"


> ## ----using walk to loop over the function does not visibly return the result----
> walk(1:3, print_value)
[1] "The value of x is  1"
[1] "The value of x is  2"
[1] "The value of x is  3"

> ## ----the returned value is available if needed---------------------------
> ans_walk <- walk(1:3, print_value)
[1] "The value of x is  1"
[1] "The value of x is  2"
[1] "The value of x is  3"

> ans_walk
[1] 1 2 3

> ## ----using an unnamed function which has argument .x---------------------
> map_dbl(c(4, 5, 6), ~ .x + 1) 
[1] 5 6 7

> ## ----creating a function to perform the comparison-----------------------
> compare_to_five <- function(value) { 
+   return(value > 5)                  
+ }

> ## ----explicitly returning a logical vector-------------------------------
> map_lgl(test_nums, compare_to_five)
[1]  TRUE FALSE FALSE FALSE  TRUE FALSE

> ## ----our function is automatically vectorized----------------------------
> compare_to_five(test_nums)
[1]  TRUE FALSE FALSE FALSE  TRUE FALSE

> ## ----sapply is a predecessor of map--------------------------------------
> sapply(test_nums, compare_to_five)
[1]  TRUE FALSE FALSE FALSE  TRUE FALSE

> ## ----a loop which does nothing but does iterate i------------------------
> for (i in 1:3) {
+   ## do nothing
+ }

> print(i) ## after the loop
[1] 3

> ## ----looping over elements of test_nums----------------------------------
> for (i in 1:6) {
+   print(test_nums[i] > 5) 
+ }
[1] TRUE
[1] FALSE
[1] FALSE
[1] FALSE
[1] TRUE
[1] FALSE

> ## ----storing elements one by one-----------------------------------------
> greater_than_5 <- c()  

> for (i in 1:6) {
+   greater_than_5[i] <- test_nums[i] > 5
+ }

> ## ----an empty object-----------------------------------------------------
> c()
NULL

> ## ----an empty vector of length six---------------------------------------
> vector(length = 6)
[1] FALSE FALSE FALSE FALSE FALSE FALSE

> ## ----a vector of NA values of length six---------------------------------
> rep(NA, 6) 
[1] NA NA NA NA NA NA

> ## ----growing an object by adding to the end of something-----------------
> some_values <- c()

> for (i in 1:100) {
+   some_values <- c(some_values, i) 
+ }

> ## ----starting with a vector of the right size----------------------------
> all_values <- rep(NA, 100)

> for (i in 1:100) {
+   all_values[i] <- i
+ }

> ## ----comparing the two results-------------------------------------------
> identical(all_values, some_values)
[1] TRUE

> ## ----printing within a conditional loop----------------------------------
> ## 6 cylinder automatics in mtcars
> for (auto_6cyl in row.names(mtcars[mtcars$cyl == 6 & mtcars$am == 1, ])) {
+   print(auto_6cyl)
+ }
[1] "Mazda RX4"
[1] "Mazda RX4 Wag"
[1] "Ferrari Dino"

> ## ----a loop which prints the iterator------------------------------------
> for (i in 1:3) {
+   message("starting i = ", i)
+ }

> ## ----a loop which prints the iterator but also changes the iterator------
> for (i in 1:3) {
+   message("starting i = ", i)
+   i <- 7
+ }

> ## ----changing the iterator means it takes that value until the end-------
> for (i in 1:3) {
+   i <- 7
+   message("ending i = ", i)
+ }

> ## ----creating a small matrix---------------------------------------------
> m <- matrix(letters[1:6], nrow = 2, ncol = 3, byrow = TRUE)

> m
     [,1] [,2] [,3]
[1,] "a"  "b"  "c" 
[2,] "d"  "e"  "f" 

> ## ----looping over the matrix rows and columns----------------------------
> for (row in 1:2) {
+   for (col in 1:3) {
+     print(paste0("m[", row, ", ", col, "] = ", m[row, col]))
+   }
+ }
[1] "m[1, 1] = a"
[1] "m[1, 2] = b"
[1] "m[1, 3] = c"
[1] "m[2, 1] = d"
[1] "m[2, 2] = e"
[1] "m[2, 3] = f"

> ## ----we can create conditions for loops so they never evaluate-----------
> while (1 == 2) {
+   print("this line will not be printed")
+ }

> ## ----the condition needs to be valid at the time of evaluation-----------
> i <- 0           

> while (i < 3) {  
+   print(i)       
+   i <- i + 1     
+ }
[1] 0
[1] 1
[1] 2

> ## ----variables used in the loop condition retain their scope-------------
> i <- 1          

> while (i < 4) { 
+   i <- i + 1    
+ }

> print(i)        
[1] 4

> ## ----conditionally evaluating based on a condition-----------------------
> x <- 5 

> if (x > 3) { 
+   print("x is greater than 3") 
+ }
[1] "x is greater than 3"

> ## ----lazy evaluation means that the body of the loop is never evaluated----
> x <- 5

> if (x < 2) {
+   print(object_that_doesnt_exist)
+ }

> ## ----this will fail because the condition is NA, eval = FALSE------------
> ## x <- NA
> ## if (x > 3) {
> ##   print("x is greater than 3")
> ## }
> 
> ## ----testing based on the logical value of x-----------------------------
> x <- TRUE

> if (x) {
+   print("do all the things")
+ }
[1] "do all the things"

> ## ----neglecting braces is valid but dangerous----------------------------
> x <- 5

> if (x > 3)
+   print("x is greater than 3")
[1] "x is greater than 3"

> ## ----accidentally using more than one line without braces, eval = FALSE----
> ## x <- 5
> ## if (x > 3) 
> ##   print("x is greater than 3")
> ##   print("this should only appear when x > 3") 
> ## 
> ## x <- 2
> ## if (x > 3)
> ##   print("x is greater than 3")
> ##   print("this should only appear when x > 3") 
> 
> ## ----this part of the code seems to be working normally, eval = FALSE----
> ## x <- 5
> ## if (x > 3)
> ##   print("x is greater than 3")
> ##   print("this should only appear when x > 3")
> ## #> [1] "x is greater than 3"
> ## #> [1] "this should only appear when x > 3"
> 
> ## ----this part of the code does not do what we expected, eval = FALSE----
> ## x <- 2
> ## if (x > 3)
> ##   print("x is greater than 3")
> ##   print("this should only appear when x > 3")
> ## #> [1] "this should only appear when x > 3"
> 
> ## ----using an else statement in a test-----------------------------------
> x <- 5

> if (x > 3) {
+   print("x is greater than 3")
+ } else {
+   print("x is less than 3")
+ }
[1] "x is greater than 3"

> ## ----make sure to only use one statement per line------------------------
> x <- 5

> if (x > 3) print("x is greater than 3") else print("x is less than 3") 
[1] "x is greater than 3"

> ## ----multiple levels of testing------------------------------------------
> x <- 5

> if (x > 6) {
+   print("x is greater than 6")
+ } else if (x > 4) {
+   print("x is greater than 4")
+ } else {
+   print("x is less than 5")
+ }
[1] "x is greater than 4"

> ## ----lazy evaluation of if block conditions------------------------------
> x <- 5

> if (x > 3) { 
+   print("x is greater than 3")
+ } else if (nonesense) { 
+   print("how did I get here?")
+ }
[1] "x is greater than 3"

> ## ----overlapping conditions----------------------------------------------
> x <- 3

> if (x > 2) {
+   print("x is greater than 2")
+ } else if (x > 1) {
+   print("x is greater than 1")
+ } else {
+   print("x is smaller than 1 and 2")
+ }
[1] "x is greater than 2"

> ## ----assigning a value based on an if block------------------------------
> x <- 5

> y <- if (x < 3) "small" else "big"

> y
[1] "big"

> ## ----equivalently assigning within a block-------------------------------
> x <- 5

> if (x < 3) {
+   y <- "small"
+ } else {
+   y <- "big"
+ }

> y
[1] "big"

> ## ----testing multiple conditions at once produces a warning--------------
> if (c(1, 2, 3) > 2) { print("TRUE") }

> ## ----the type of value returned depends on the test condition------------
> ifelse(TRUE, "a string", 7L)
[1] "a string"

> ifelse(FALSE, "a string", 7L)
[1] 7

> ## ----testing NA results in NA--------------------------------------------
> ifelse(NA, "test was TRUE", "test was FALSE")
[1] NA

> ## ----lazy evaluation of test results-------------------------------------
> ifelse(FALSE, undefined_variable, 8L)
[1] 8

> ## ----the value returned from a test is the same shape as the condition----
> ifelse(TRUE, c(2, 3), "z") 
[1] 2

> ## ----a longer test argument results in the returned value being recycled----
> ifelse(c(TRUE, TRUE), 3, "z") 
[1] 3 3

> ## ----all elements of returned vectors need to be valid-------------------
> ifelse(c(TRUE, FALSE), c(3, 9), c(9, 3)) 
[1] 3 3

> ## ----this will fail because not_a_var is not defined, eval = FALSE-------
> ## ifelse(c(TRUE, FALSE), c(3, not_a_var), c(9, 3))
> 
> ## ----a vector with positive and negative values--------------------------
> x <- -3:3

> x
[1] -3 -2 -1  0  1  2  3

> ## ----taking the square root of a negative number results in NaN----------
> sqrt(x)
[1]      NaN      NaN      NaN 0.000000 1.000000 1.414214 1.732051

> ## ----the yes condition is still evaluated for all x but only a subset are kept----
> ifelse(x >= 0, sqrt(x), NA)
[1]       NA       NA       NA 0.000000 1.000000 1.414214 1.732051

> ## ----performing the sqrt outside of the ifelse removes negative values first----
> sqrt(ifelse(x >= 0, x, NA))
[1]       NA       NA       NA 0.000000 1.000000 1.414214 1.732051

> ## ----using ifelse() inside a mutate call---------------------------------
> head(						
+   dplyr::mutate(
+     mtcars,					
+     hp_per_cc_auto = ifelse(am, hp / disp, NA)	
+   )
+ )
   mpg cyl disp  hp drat    wt  qsec vs am gear carb hp_per_cc_auto
1 21.0   6  160 110 3.90 2.620 16.46  0  1    4    4      0.6875000
2 21.0   6  160 110 3.90 2.875 17.02  0  1    4    4      0.6875000
3 22.8   4  108  93 3.85 2.320 18.61  1  1    4    1      0.8611111
4 21.4   6  258 110 3.08 3.215 19.44  1  0    3    1             NA
5 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2             NA
6 18.1   6  225 105 2.76 3.460 20.22  1  0    3    1             NA

> ## ----case_when to modify a column with dplyr-----------------------------
> head(
+   dplyr::mutate(
+     mtcars,
+     hp_per_cc_auto = dplyr::case_when(am == 1 ~ hp / disp, 
+                                       am == 0 ~ NA_real_)  
+   )
+ )
   mpg cyl disp  hp drat    wt  qsec vs am gear carb hp_per_cc_auto
1 21.0   6  160 110 3.90 2.620 16.46  0  1    4    4      0.6875000
2 21.0   6  160 110 3.90 2.875 17.02  0  1    4    4      0.6875000
3 22.8   4  108  93 3.85 2.320 18.61  1  1    4    1      0.8611111
4 21.4   6  258 110 3.08 3.215 19.44  1  0    3    1             NA
5 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2             NA
6 18.1   6  225 105 2.76 3.460 20.22  1  0    3    1             NA

> ## ----unique values of mtcars$cyl-----------------------------------------
> ## find the unique values of cyl in mtcars and sort them numerically
> ## (by default they are in the order in which they first appear)
> car_cyls <- sort(unique(mtcars$cyl))

> ## ----creating a showcase function----------------------------------------
> ## takes input num_cyls and prints a statement
> ##   about mtcars rows with that number of cylinders
> showcase <- function(num_cyls) {
+   
+   ## subset mtcars to the rows with num_cyls cylinders
+   ## this uses [ instead of dplyr::filter since the latter
+   ##   drops row names
+   cars_with_cyls <- mtcars[mtcars$cyl == num_cyls, ]
+   
+   ## identify the row with the highest mpg
+   ## uses [ to preserve rownames
+   ## which.max finds the index of the highest value
+   most_efficient <- cars_with_cyls[which.max(cars_with_cyls$mpg), ]
+   
+   ## print a nice message to the console explaining the results
+   cat(paste("There are", nrow(cars_with_cyls), "cars with", num_cyls, 
+             "cylinders.\nThe most fuel efficient of these is the", 
+             rownames(most_efficient), "\n\n"))
+   
+ }

> ## ----using the showcase function-----------------------------------------
> showcase(4)
There are 11 cars with 4 cylinders.
The most fuel efficient of these is the Toyota Corolla 


> ## ----using showcase with walk--------------------------------------------
> # install.packages("purrr")
> library(purrr)

> ## walk is equivalent to map but doesn't return anything explicitly
> ##   (actually returns the input list, invisibly)
> walk(car_cyls, showcase)
There are 11 cars with 4 cylinders.
The most fuel efficient of these is the Toyota Corolla 

There are 7 cars with 6 cylinders.
The most fuel efficient of these is the Hornet 4 Drive 

There are 14 cars with 8 cylinders.
The most fuel efficient of these is the Pontiac Firebird 

> 
> 
